trigger:
    - master
pool:
    vmImage: 'Windows-2019'
variables:
    PROJECT_NAME:   'Cube.Pdf'
    PROJECT_ARCH:   'Any CPU'
    PROJECT_CONFIG: 'Release'
    PROJECT_BIN:    'bin\$(PROJECT_ARCH)\$(PROJECT_CONFIG)\net45'
    PROJECT_LIB:    '..\packages'
    TEST_TOOL:      '$(PROJECT_LIB)\OpenCover\4.7.922\tools\OpenCover.Console.exe'
    TEST_CORETOOL:  '$(PROJECT_LIB)\NUnit.ConsoleRunner\3.10.0\tools\nunit3-console.exe'
    TEST_FILTERS:   '+[Cube*]* -[*]*.NativeMethods -[*]*.Properties.* -[*]*.Program -[*]*.App -[*]*Window -[*]*Control'
    TEST_RESULT:    'TestResult.xml'
    TEST_COVERAGE:  'CoverResults.xml'
    TEST_LOG:       '$(Build.ArtifactStagingDirectory)\TestResults'

steps:
- task: NuGetToolInstaller@0
  inputs:
    versionSpec: '>= 4.9'
  displayName: 'Use NuGet 4.9 or later'

- script: |
    nuget restore "$(PROJECT_NAME).Apps.sln"
  displayName: 'Restore NuGet packages'

- task: VSBuild@1
  inputs:
    solution: '$(PROJECT_NAME).Apps.sln'
    platform: '$(PROJECT_ARCH)'
    configuration: '$(PROJECT_CONFIG)'
  displayName: 'Build solution'

- task: CopyFiles@2
  inputs:
    contents: '**\win-x64\native\*.dll'
    sourceFolder: '$(Build.SourcesDirectory)\$(PROJECT_LIB)\Cube.Native.Ghostscript'
    targetFolder: 'Libraries\Tests\$(PROJECT_BIN)'
    flattenFolders: true
    overWrite: true
  displayName: 'Copy Ghostscript files to the library test directory.'

- task: CopyFiles@2
  inputs:
    contents: '**\win-x64\native\*.dll'
    sourceFolder: '$(Build.SourcesDirectory)\$(PROJECT_LIB)\Cube.Native.Ghostscript'
    targetFolder: 'Applications\Converter\Tests\$(PROJECT_BIN)'
    flattenFolders: true
    overWrite: true
  displayName: 'Copy Ghostscript files to the CubePDF test directory.'

- task: CopyFiles@2
  inputs:
    contents: '**\win-x64\native\*.dll'
    sourceFolder: '$(Build.SourcesDirectory)\$(PROJECT_LIB)\Cube.Native.Pdfium.Lite'
    targetFolder: 'Libraries\Tests\$(PROJECT_BIN)'
    flattenFolders: true
    overWrite: true
  displayName: 'Copy PDFium files to the library test directory.'

- task: CopyFiles@2
  inputs:
    contents: '**\win-x64\native\*.dll'
    sourceFolder: '$(Build.SourcesDirectory)\$(PROJECT_LIB)\Cube.Native.Pdfium.Lite'
    targetFolder: 'Applications\Editor\Tests\$(PROJECT_BIN)'
    flattenFolders: true
    overWrite: true
  displayName: 'Copy PDFium files to the CubePDF Utility test directory.'

- script: >
    "$(TEST_TOOL)"
    -log:Error
    -register:user
    -target:"$(TEST_CORETOOL)"
    -targetargs:"$(PROJECT_NAME).Tests.dll"
    -targetdir:"Libraries\Tests\$(PROJECT_BIN)"
    -returntargetcode
    -hideskipped:All
    -output:"$(TEST_COVERAGE)"
    -filter:"$(TEST_FILTERS)"
  displayName: 'Run tests for libraries via OpenCover and NUnit'

- script: >
    "$(TEST_TOOL)"
    -log:Error
    -register:user
    -target:"$(TEST_CORETOOL)"
    -targetargs:"$(PROJECT_NAME).Converter.Tests.dll"
    -targetdir:"Applications\Converter\Tests\$(PROJECT_BIN)"
    -returntargetcode
    -hideskipped:All
    -mergeoutput
    -output:"$(TEST_COVERAGE)"
    -filter:"$(TEST_FILTERS)"
  displayName: 'Run tests for CubePDF via OpenCover and NUnit'

- script: >
    "$(TEST_TOOL)"
    -log:Error
    -register:user
    -target:"$(TEST_CORETOOL)"
    -targetargs:"$(PROJECT_NAME).Editor.Tests.dll"
    -targetdir:"Applications\Editor\Tests\$(PROJECT_BIN)"
    -returntargetcode
    -hideskipped:All
    -mergeoutput
    -output:"$(TEST_COVERAGE)"
    -filter:"$(TEST_FILTERS)"
  displayName: 'Run tests for CubePDF Utility via OpenCover and NUnit'

- script: |
    pip install codecov
    codecov -f "$(TEST_COVERAGE)" -t $(CODECOV_TOKEN)
  displayName: 'Send coverage results to Codecov'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'NUnit'
    testResultsFiles: '**\$(TEST_RESULT)'
  displayName: 'Publish test results'

- task: NuGetCommand@2
  inputs:
    command: 'pack'
    packagesToPack: 'Libraries\*\$(PROJECT_NAME)*.csproj'
    configuration: '$(PROJECT_CONFIG)'
  displayName: 'Create NuGet packages'

- task: ArchiveFiles@2
  inputs:
    archiveFile: '$(Build.ArtifactStagingDirectory)/CubePdf.zip'
    rootFolderOrFile: 'Applications\Converter\Main\$(PROJECT_BIN)'
    includeRootFolder: false
    archiveType: 'zip'
    replaceExistingArchive: true
  displayName: 'Pack CubePDF files'

- task: ArchiveFiles@2
  inputs:
    archiveFile: '$(Build.ArtifactStagingDirectory)/CubePdf.Proxy.zip'
    rootFolderOrFile: 'Applications\Converter\Proxy\$(PROJECT_BIN)'
    includeRootFolder: false
    archiveType: 'zip'
    replaceExistingArchive: true
  displayName: 'Pack CubeProxy files'

- task: ArchiveFiles@2
  inputs:
    archiveFile: '$(Build.ArtifactStagingDirectory)/CubePdf.Utility.zip'
    rootFolderOrFile: 'Applications\Editor\Main\$(PROJECT_BIN)'
    includeRootFolder: false
    archiveType: 'zip'
    replaceExistingArchive: true
  displayName: 'Pack CubePDF Utility files'

- task: ArchiveFiles@2
  inputs:
    archiveFile: '$(Build.ArtifactStagingDirectory)/CubePdf.Utility.Proxy.zip'
    rootFolderOrFile: 'Applications\Editor\Proxy\$(PROJECT_BIN)'
    includeRootFolder: false
    archiveType: 'zip'
    replaceExistingArchive: true
  displayName: 'Pack CubePDF Utility Splash files'

- task: CopyFiles@2
  inputs:
    contents: '**\*.log'
    targetFolder: '$(TEST_LOG)'
    overWrite: true
  displayName: 'Copy log files'

- task: CopyFiles@2
  inputs:
    contents: '**\$(TEST_RESULT)'
    targetFolder: '$(TEST_LOG)'
    overWrite: true
  displayName: 'Copy test results'

- task: CopyFiles@2
  inputs:
    contents: '$(TEST_COVERAGE)'
    targetFolder: '$(TEST_LOG)'
    overWrite: true
  displayName: 'Copy coverage results'

- task: PublishPipelineArtifact@0
  inputs:
    artifactName: '$(PROJECT_NAME)'
    targetPath: '$(Build.ArtifactStagingDirectory)'
  displayName: 'Publish pipline artifacts'
